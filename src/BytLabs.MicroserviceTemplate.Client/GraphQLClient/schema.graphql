schema {
  query: Query
  mutation: Mutation
}

type BusinessError {
  code: String
  property: String
  message: String!
}

type InputValidationError {
  fields: [FieldError!]!
  message: String!
}

type FieldError {
  code: String!
  field: String!
  message: String!
}

input CreateOrderInput {
  orderId: ID!
  orderDate: DateTime!
  items: [OrderItemInput!]!
}

input ShipOrderInput {
  orderId: ID!
}

type Order {
  orderDate: DateTime!
  status: OrderStatus!
  items: [OrderItem!]!
  id: ID!
  createdAt: DateTime
  createdBy: String
  lastModifiedAt: DateTime
  lastModifiedBy: String
  deletedAt: DateTime
  deletedBy: String
}

"Defines when a policy shall be executed."
enum ApplyPolicy {
  "Before the resolver was executed."
  BEFORE_RESOLVER
  "After the resolver was executed."
  AFTER_RESOLVER
  "The policy is applied in the validation step before the execution."
  VALIDATION
}

type Mutation {
  createOrder(input: CreateOrderInput!): CreateOrderPayload!
  markOrderAsShipped(input: MarkOrderAsShippedInput!): MarkOrderAsShippedPayload!
}

type Query {
  orders("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String order: [OrderSortInput!] where: OrderFilterInput): OrdersConnection
}

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime

input OrderItemInput {
  productId: ID!
  quantity: Int!
  price: Decimal!
  id: ID!
  createdAt: DateTime
  createdBy: String
  lastModifiedAt: DateTime
  lastModifiedBy: String
  deletedAt: DateTime
  deletedBy: String
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
}

type OrderItem {
  productId: ID!
  quantity: Int!
  price: Decimal!
  id: ID!
  createdAt: DateTime
  createdBy: String
  lastModifiedAt: DateTime
  lastModifiedBy: String
  deletedAt: DateTime
  deletedBy: String
}

type ValidationError implements Error {
  message: String!
  errors: [ValidationFailure]
}

type DomainError implements Error {
  message: String!
}

type ApplicationError implements Error {
  message: String!
}

input OrderSortInput {
  orderDate: SortEnumType
  status: SortEnumType
  id: SortEnumType
  createdAt: SortEnumType
  createdBy: SortEnumType
  lastModifiedAt: SortEnumType
  lastModifiedBy: SortEnumType
  deletedAt: SortEnumType
  deletedBy: SortEnumType
}

input OrderFilterInput {
  and: [OrderFilterInput!]
  or: [OrderFilterInput!]
  orderDate: DateTimeOperationFilterInput
  status: OrderStatusOperationFilterInput
  items: ListFilterInputTypeOfOrderItemFilterInput
  domainEvents: ListFilterInputTypeOfIDomainEventFilterInput
  id: UuidOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  lastModifiedAt: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  deletedAt: DateTimeOperationFilterInput
  deletedBy: StringOperationFilterInput
}

"A connection to a list of items."
type OrdersConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [OrdersEdge!]
  "A flattened list of the nodes."
  nodes: [Order!]
}

interface Error {
  message: String!
}

enum SortEnumType {
  ASC
  DESC
}

input DateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime]
  nin: [DateTime]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

input OrderStatusOperationFilterInput {
  eq: OrderStatus
  neq: OrderStatus
  in: [OrderStatus!]
  nin: [OrderStatus!]
}

input ListFilterInputTypeOfOrderItemFilterInput {
  all: OrderItemFilterInput
  none: OrderItemFilterInput
  some: OrderItemFilterInput
  any: Boolean
}

input ListFilterInputTypeOfIDomainEventFilterInput {
  all: IDomainEventFilterInput
  none: IDomainEventFilterInput
  some: IDomainEventFilterInput
  any: Boolean
}

input UuidOperationFilterInput {
  eq: UUID
  neq: UUID
  in: [UUID]
  nin: [UUID]
  gt: UUID
  ngt: UUID
  gte: UUID
  ngte: UUID
  lt: UUID
  nlt: UUID
  lte: UUID
  nlte: UUID
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

"An edge in a connection."
type OrdersEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Order!
}

input OrderItemFilterInput {
  and: [OrderItemFilterInput!]
  or: [OrderItemFilterInput!]
  productId: UuidOperationFilterInput
  quantity: IntOperationFilterInput
  price: DecimalOperationFilterInput
  id: UuidOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  createdBy: StringOperationFilterInput
  lastModifiedAt: DateTimeOperationFilterInput
  lastModifiedBy: StringOperationFilterInput
  deletedAt: DateTimeOperationFilterInput
  deletedBy: StringOperationFilterInput
}

input IDomainEventFilterInput {
  and: [IDomainEventFilterInput!]
  or: [IDomainEventFilterInput!]
}

scalar UUID

input IntOperationFilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input DecimalOperationFilterInput {
  eq: Decimal
  neq: Decimal
  in: [Decimal]
  nin: [Decimal]
  gt: Decimal
  ngt: Decimal
  gte: Decimal
  ngte: Decimal
  lt: Decimal
  nlt: Decimal
  lte: Decimal
  nlte: Decimal
}

"The `Decimal` scalar type represents a decimal floating-point number."
scalar Decimal

type ValidationFailure {
  propertyName: String
  errorMessage: String
  severity: Severity!
  errorCode: String
  formattedMessagePlaceholderValues: [KeyValuePairOfStringAndObject!]
}

type ShipOrderResult {
  orderId: ID!
}

type CreateOrderResult {
  orderId: ID!
}

type KeyValuePairOfStringAndObject {
  key: String!
}

enum Severity {
  ERROR
  WARNING
  INFO
}

union CreateOrderError = ValidationError | DomainError | ApplicationError

type CreateOrderPayload {
  createOrderResult: CreateOrderResult
  errors: [CreateOrderError!]
}

input MarkOrderAsShippedInput {
  input: ShipOrderInput!
}

union MarkOrderAsShippedError = ValidationError | DomainError | ApplicationError

type MarkOrderAsShippedPayload {
  shipOrderResult: ShipOrderResult
  errors: [MarkOrderAsShippedError!]
}

"The purpose of the `cost` directive is to define a `weight` for GraphQL types, fields, and arguments. Static analysis can use these weights when calculating the overall cost of a query or response."
directive @cost("The `weight` argument defines what value to add to the overall cost for every appearance, or possible appearance, of a type, field, argument, etc." weight: String!) on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM | INPUT_FIELD_DEFINITION

"The purpose of the `@listSize` directive is to either inform the static analysis about the size of returned lists (if that information is statically available), or to point the analysis to where to find that information."
directive @listSize("The `assumedSize` argument can be used to statically define the maximum length of a list returned by a field." assumedSize: Int "The `slicingArguments` argument can be used to define which of the field's arguments with numeric type are slicing arguments, so that their value determines the size of the list returned by that field. It may specify a list of multiple slicing arguments." slicingArguments: [String!] "The `slicingArgumentDefaultValue` argument can be used to define a default value for a slicing argument, which is used if the argument is not present in a query." slicingArgumentDefaultValue: Int "The `sizedFields` argument can be used to define that the value of the `assumedSize` argument or of a slicing argument does not affect the size of a list returned by a field itself, but that of a list returned by one of its sub-fields." sizedFields: [String!] "The `requireOneSlicingArgument` argument can be used to inform the static analysis that it should expect that exactly one of the defined slicing arguments is present in a query. If that is not the case (i.e., if none or multiple slicing arguments are present), the static analysis may throw an error." requireOneSlicingArgument: Boolean! = true) on FIELD_DEFINITION